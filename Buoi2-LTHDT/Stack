// nguồn tham khảo bài tập trên lớp, 
// trang tham khảo https://www.geeksforgeeks.org/introduction-to-stack-data-structure-and-algorithm-tutorials/

#include <conio.h>
using namespace std;

#define MAX 1000
  class Stack {
    int top; // top trả giá trị (return) đầu của mảng (top)
  
public:
    int a[MAX]; // kích thước tối đa mà ngăn xếp có thể xử lý
  
    Stack() { top = -1; }
    bool push(int x);
    int pop();
    int peek();
    bool isEmpty();
};
  
bool Stack::push(int x)
{
    if (top >= (MAX - 1)) {
        cout << "Stack Overflow: ngăn xếp tràn";
        return false;
    }
    else {
        a[++top] = x;
        cout << x << " đẩy x vào đầu ( tức cuối mảng) ngăn xếp\n";
        return true;
    }
}
  
int Stack::pop()
{
    if (top < 0) {
        cout << "Stack Underflow: ngăn xếp không đầy";
        return 0;
    }
    else {
        int x = a[top--];
        return x;
    }
}
int Stack::peek()
{
    if (top < 0) {
        cout << "Ngăn xếp rỗng";
        return 0;
    }
    else {
        int x = a[top];
        return x;
    }
}
  
bool Stack::isEmpty()
{
    return (top < 0);
}

int main()
{
    class Stack s;
    s.push(10);
    s.push(20);
    s.push(30);
    cout << s.pop() << " xóa giá trị (pop) khỏi mảng\n";  
    cout << "giá trị đầu là : " << s.peek() << endl;
    cout <<"Các phần tử có trong ngăn xếp : ";
    while(!s.isEmpty())
    {
        cout << s.peek() <<" ";
        s.pop();
    }
    return 0;
}
/*
push() gán giá trị vào ngăn xếp
pop() loại giá trị khỏi ngăn xếp
top() Returns giá trị đầu (top).
isEmpty() returns true nếu ngăn xếp rỗng else false.
size() return giá trị ngăn xếp.
*/

ví dụ tham khảo trên https://www.geeksforgeeks.org

#include <bits/stdc++.h>
using namespace std;
 
void heap_sort(vector<int>& arr);
void build_heap(vector<int>& arr);
void heapify(vector<int>& arr, int i, int heap_size);
 
void heap_sort(vector<int>& arr){
    build_heap(arr);
    for (int i = arr.size() - 1; i > 0; i--){
        swap(arr[0], arr[i]);
        int heap_size = i;
        heapify(arr, 0, heap_size);
    }
    reverse(arr.begin(), arr.end());
}
void build_heap(vector<int>& arr){
    int n = arr.size();
    for (int i = n / 2 - 1; i >= 0; i--){
        heapify(arr, i, n);
    }
}
void heapify(vector<int>& arr, int i, int heap_size){
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;
 
    if (left < heap_size && arr[left] > arr[largest])
        largest = left;
    if (right < heap_size && arr[right] > arr[largest])
        largest = right;
 
    if (largest != i){
        swap(arr[i], arr[largest]);
        heapify(arr, largest, heap_size);
    }
}
int main(){
    vector<int> arr = {5, 2, 9, 1, 5, 6};
    heap_sort(arr);
      cout<<"[";
    for(int i = 0; i<arr.size()-1; i++){
      cout<<arr[i]<<", ";
    }
      cout<<arr[arr.size()-1]<<"]";
    cout << endl; // Output: 1 2 5 5 6 9
    return 0;
}



/*Array = {1, 3, 5, 4, 6, 13, 10, 9, 8, 15, 17}
Corresponding Complete Binary Tree is:

                 1
              /     \
           3         5
        /    \     /  \
      4      6   13  10
     / \    / \
   9   8  15 17

The task to build a Max-Heap from above array.

Total Nodes = 11.

Total non-leaf nodes= (11/2)-1=5

last non-leaf node = 6.

Therefore, Last Non-leaf node index = 4.

To build the heap, heapify only the nodes: [1, 3, 5, 4, 6] in reverse order.

Heapify 6: Swap 6 and 17.

                 1
              /     \
           3         5
        /    \      /  \
     4      17   13  10
    / \    /  \
  9   8  15   6

Heapify 4: Swap 4 and 9.

                 1
              /     \
           3         5
        /    \      /  \
     9      17   13  10
    / \    /  \
  4   8  15   6

Heapify 5: Swap 13 and 5.

                 1
              /     \
           3         13
        /    \      /  \
     9      17   5   10
    / \    /  \
 4   8  15   6

Heapify 3: First Swap 3 and 17, again swap 3 and 15.

                 1
             /     \
        17         13
       /    \      /  \
    9      15   5   10
   / \    /  \
 4   8  3   6

Heapify 1: First Swap 1 and 17, again swap 1 and 15, finally swap 1 and 6.

                 17
              /      \
          15         13
         /    \      /  \
       9      6    5   10
      / \    /  \
    4   8  3    1
    
    */
